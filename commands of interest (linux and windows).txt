#--- MOUNT SHARED FOLDERS
mount -f cifs //IPADDRESS/FOLDER


#--- CURL
curl -k HTTP://SITE -o FILENAME

-o <file>    # --output: write to file
-u user:pass # --user: Authentication
-v           # --verbose
-vv          # Even more verbose
-s           # --silent
-i           # --include: Include the HTTP-header in the output
-I           # --head: headers only
-k           # --insecure        # for self-signed certs


#--- EXIFTOOL (Steganography) ---
sudo apt install libimage-exiftool-perl > install if not have it
It's a open source program for reading, modifying, and manipulating images, videos, audios and PDF metadata.
Metadata are the additional data added to multimedia files. For example, the metadata of photographs are the
additional data like the name of the device, the resolution of the image, the location the image was taken at, 
the date of capture and modification and more.

exiftool FILE     -> list all metadata
exiftool -h FILE > FILE.html      -> export metadata to html file


#--- BINWALK (Steganography) ---
Binwalk is a tool for searching a given binary image for embedded files and executable code. Specifically, 
it is designed for identifying files and code embedded inside of firmware images. Binwalk uses the libmagic 
library, so it is compatible with magic signatures created for the Unix file utility. Binwalk also includes 
a custom magic signature file which contains improved signatures for files that are commonly found in firmware 
images such as compressed/archived files, firmware headers, Linux kernels, bootloaders, filesystems, etc
SIGNATURE SCAN OPTIONS
    -B, --signature              Scan target file(s) for common file signatures
    -R, --raw=<str>              Scan target file(s) for the specified sequence of bytes
    -A, --opcodes                Scan target file(s) for common executable opcode signatures
    -m, --magic=<file>           Specify a custom magic file to use
    -b, --dumb                   Disable smart signature keywords
    -I, --invalid                Show results marked as invalid
    -x, --exclude=<str>          Exclude results that match <str>
    -y, --include=<str>          Only show results that match <str>
EXTRACTION OPTIONS
   -e, --extract                Automatically extract known file types
    -D, --dd=<type:ext:cmd>      Extract <type> signatures, give the files an extension of <ext>, and execute <cmd>
    -M, --matryoshka             Recursively scan extracted files
    -d, --depth=<int>            Limit matryoshka recursion depth (default: 8 levels deep)
    -C, --directory=<str>        Extract files/folders to a custom directory (default: current working directory)
    -j, --size=<int>             Limit the size of each extracted file
    -n, --count=<int>            Limit the number of extracted files
    -r, --rm                     Delete carved files after extraction
    -z, --carve                  Carve data from files, but don't execute extraction utilities
    -V, --subdirs                Extract into sub-directories named by the offset
GENERAL OPTIONS
    -l, --length=<int>           Number of bytes to scan
    -o, --offset=<int>           Start scan at this file offset
    -O, --base=<int>             Add a base address to all printed offsets
    -K, --block=<int>            Set file block size
    -g, --swap=<int>             Reverse every n bytes before scanning
    -f, --log=<file>             Log results to file
    -c, --csv                    Log results to file in CSV format
    -t, --term                   Format output to fit the terminal window
    -q, --quiet                  Suppress output to stdout
    -v, --verbose                Enable verbose output
    -h, --help                   Show help output
    -a, --finclude=<str>         Only scan files whose names match this regex
    -p, --fexclude=<str>         Do not scan files whose names match this regex
    -s, --status=<int>           Enable the status server on the specified port

#--- FIND
find / -type [d/f] [-name, =perm] FILE 2>/dev/null

#--- CREATING PATTERNS FOR BUFFER OVERFLOWS
msf-pattern_create -l NUMBER
once we get the EIP HEX crash, copy/remember the numbers
msf-pattern_offset -l NUMBER -q EIP_HEX_CRASH
this will get us in which char number app crashes

#--- IMMUNITY DEBUGGER
